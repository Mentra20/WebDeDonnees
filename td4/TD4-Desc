Question 1:

select distinct ?Actor where {
?Actor ?x ?y
filter(?Actor = <http://dbpedia.org/resource/Tom_Hanks>)
} LIMIT 100


Depuis corese : 

select * 
where {
  service <http://dbpedia.org/sparql/> {
     select distinct ?Actor where {
	?Actor ?x ?y
	filter(?Actor = <http://dbpedia.org/resource/Tom_Hanks>)
     } LIMIT 100
  }
}

Question 2 :

prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>

select ?film where {
?film onto:starring tom:
}

Depuis corese: 

prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select ?film where {
	?film onto:starring tom:
    }
  }
}

Question 3 :

prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select ?filmName where {
?film onto:starring tom: .
?film prop:title ?filmName 
filter(lang(?filmName) = "en")
}

corese: 
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select ?filmName where {
	?film onto:starring tom: .
	?film prop:title ?filmName 
	filter(lang(?filmName) = "en")
	}
}}

Question 4 :
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>

select distinct ?actor where {
?film onto:starring tom:.
?film onto:starring ?actor
filter(?actor != tom:)
}

corese:
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select distinct ?actor where {
	?film onto:starring tom:.
	?film onto:starring ?actor
	filter(?actor != tom:)
}
}}

Question 5.1 : 
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>

select (count(distinct ?actor) as ?count) where {
?film onto:starring tom:.
?film onto:starring ?actor.
?actor a onto:Person
filter(?actor != tom:)
}

Question 5.2 :
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select ?actor ?nbFilm where {
		{select ?actor (count(distinct ?film) as ?nbFilm) where {  
		?film onto:starring tom:.
		?film onto:starring ?actor.
		?actor a onto:Person
		filter(?actor != tom:)
		}}
	filter(?nbFilm >1)
	}
}}

Question 6 :

prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select distinct ?director where {
		?film onto:starring tom:.
		?film onto:director ?director.
		?director a onto:Person
	}
}}

Question 7 :
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select (count(distinct ?director) as ?nbDirector) where {
		?film onto:starring tom:.
		?film onto:director ?director.
		?director a onto:Person
	}
}}

Question 8 :
prefix tom:<http://dbpedia.org/resource/Tom_Hanks>
prefix onto:<http://dbpedia.org/ontology/>
prefix prop:<http://dbpedia.org/property/>

select * 
where {
  service <http://dbpedia.org/sparql/> {
	select distinct ?director where {
		?film !onto:starring tom:.
		?film onto:director ?director.
		?director a onto:Person
	}
	order by asc(?director)
}}